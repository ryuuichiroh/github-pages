name: Convert Asciidoc to HTML and Deploy

on:
  push:
    branches: [main]
    paths: ["docs/**/*"]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Asciidoctor
        run: |
          sudo apt-get update
          sudo apt-get install -y asciidoctor

      - name: Convert Asciidoc to HTML
        run: |
          # adocファイルが存在する場合のみ変換を実行
          if ls docs/**/*.adoc 1> /dev/null 2>&1; then
            for file in docs/**/*.adoc; do
              # ディレクトリ構造を保持したまま .adoc を .html に変更
              htmlfile="${file%.adoc}.html"
              echo "Converting $file to $htmlfile"
              asciidoctor -a linkcss \
                -a stylesdir=https://cdnjs.cloudflare.com/ajax/libs/asciidoctor.js/2.2.5/css \
                -a stylesheet=asciidoctor.css \
                -o "$htmlfile" "$file"
            done
          else
            echo "No .adoc files found to convert"
          fi

      - name: Add Mermaid support
        run: |
          # HTMLファイルにMermaidサポートを追加
          for htmlfile in docs/**/*.html; do
            if [ -f "$htmlfile" ]; then
              # Mermaidスクリプトを別ファイルに作成してから挿入
              cat > mermaid-script.js << 'EOF'
              <script src="https://cdn.jsdelivr.net/npm/mermaid@10/dist/mermaid.min.js"></script>
              <script>
              document.addEventListener("DOMContentLoaded", function() {
                mermaid.initialize({startOnLoad: false, theme: "default"});
                const blocks = document.querySelectorAll(".literalblock .content, .listingblock .content");
                let index = 0;
                blocks.forEach(block => {
                  const pre = block.querySelector("pre");
                  if (pre) {
                    const content = pre.textContent.trim();
                    if (content.startsWith("flowchart") || content.startsWith("graph") || 
                        content.startsWith("sequenceDiagram") || content.startsWith("classDiagram") || 
                        content.startsWith("stateDiagram") || content.startsWith("journey") || 
                        content.startsWith("gantt") || content.startsWith("pie")) {
                      const div = document.createElement("div");
                      div.className = "mermaid";
                      div.id = "mermaid-" + index;
                      mermaid.render("diagram-" + index, content).then(result => {
                        div.innerHTML = result.svg;
                        block.parentNode.replaceChild(div, block);
                      }).catch(() => {
                        div.innerHTML = "<p>Mermaid rendering failed</p>";
                        block.parentNode.replaceChild(div, block);
                      });
                      index++;
                    }
                  }
                });
              });
              </script>
              </head>
              EOF
              
              # </head>の直前にスクリプトを挿入
              sed -i '/<\/head>/r mermaid-script.js' "$htmlfile"
              sed -i '/<\/head>/d' "$htmlfile"
              
              # 一時ファイルを削除
              rm mermaid-script.js
            fi
          done

      - name: List files to be deployed
        run: |
          echo "Files that will be deployed to GitHub Pages:"
          find docs -type f | sort

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3.0.1
        with:
          path: docs

  deploy:
    needs: build
    runs-on: ubuntu-latest
    permissions:
      pages: write
      id-token: write
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
